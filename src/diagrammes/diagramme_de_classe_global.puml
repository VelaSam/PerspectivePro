@startuml


skinparam backgroundColor #EEEBDC

legend top left
 |= Color  |= Package |
 |<back:#a2c5eb>   </back>| Modele |
 |<back:#42b883>   </back>| Vue |
 |<back:#dea2eb>   </back>| Controleur |
 |<back:#FEFFA5>   </back>| Observer |
 |<back:#F5B0CB>   </back>| Commande |
 |<back:#2CEAA3>   </back>| Memento |
 |<back:#7287DF>   </back>| Strategy |

 endlegend




    '----------OBSERVER--------------'
    interface Observer #FEFFA5{
        +update(s: Subject)
    }

    abstract class Subject #FEFFA5{
        -observers: Observer<>

        +attachObserver(o: Observer)
        +detachObserver(o: Observer)
        +notifyObservers()
        +clearObservers()
    }
    '-----------OBSERVER--------------'



    '-----------COMMAND--------------'
    interface Commande #F5B0CB {
        +execute()
    }

    class CommandeCharger #F5B0CB implements Commande {
        +execute()
    }

    class CommandTranslate #F5B0CB implements Commande{
        -currentImageView: ImageView
        -event: MouseEvent
        -ecartH: double
        -ecartV: double

        +CommandTranslate(e: MouseEvent,
        iV: ImageView, eH: double, eV: double)
        +execute()
    }

    class CommandZoomIn #F5B0CB implements Commande{
        -e: ScrollEvent
        -perspective: int

        +CommandZoomIn(e: ScrollEvent, p: int)
        +execute()
    }

    class CommandZoomOut #F5B0CB implements Commande{
        +e: ScrollEvent
        -perspective: int

        +CommandZoomOut(e: ScrollEvent, p: int)
        +execute()
    }

    class CommandUndo #F5B0CB implements Commande{
        +execute()
    }

    class CommandRedo #F5B0CB implements Commande{
        +execute()
    }

    class CommandSetMilieu #F5B0CB implements Commande{
        +execute()
    }

    class CommandSetDroite #F5B0CB implements Commande{
        +execute()
    }
    '-----------COMMAND--------------'


    '-----------SINGLETON--------------'
    class GestionnaireCommande #dea2eb{
        -instance: GestionnaireCommande
        -cps: currentProjectState
        -pileDeCommande: Stack<MementoIF>
        -pileDeUndo: Stack<MementoIF>
        -verticalBoxPrincipal: VerticalBoxPrincipal

        -GestionnaireCommande()
        +{static} getInstance(): GestionnaireCommande
        +{static} setInstance(i: GestionnaireCommande)
        +undo(): MementoIF
        +redo(): MementoIF
    }
    '-----------SINGLETON--------------'

    '-----------MEMENTO--------------'

    'Originator = CurrentProjectState'
    'Caretaker = GestionnaireDeCommande'

    interface MementoIF #2CEAA3{
    }

    class Memento #2CEAA3 implements MementoIF {
        -imagePath: String
        -xImageMilieu: double
        -yImageMilieu: double
        -xImageDroite: double
        -yImageDroite: double
        -zoomPourcentageImageMilieu: double
        -zoomPourcentageImageDroite: double

        +Memento(c: ImageContainer,
        pM: Perspective, pD: Perspective)
    }
    '-----------MEMENTO--------------'

    '----------MODELE-----------------'
    class CurrentProjectState #a2c5eb extends Subject {

        -perspectiveMilieu: Perspective
        -perspectiveDroite: Perspective
        -currentProjectImageContainer: ImageContainer

        +CurrentProjectState(c: ImageContainer,
        pM: Perspective, pD: Perspective)
        +save(): MementoIF
        +restore()
        +getBack()
    }

    class ImageContainer #a2c5eb extends Subject {
        -path: String
        -image: ImageView

        +ImageContainer(path: String)
        +close(): ImageContainer
        +changeImage(path: String)
    }

    class Perspective #a2c5eb extends Subject{
        -imageView: ImageView
        -positionX: double
        -positionY: double
        -zoomPourcentage: double

        +Perspective(iv: ImageView)
        +close(): Perspective
        +changeImage(p: String)
    }
    '----------MODELE-----------------'

    '---------CONTROLEUR--------------'
    class Controleur #dea2eb{
        -{static} compteurSave: int
        -commande: Commande
        -vbp: VerticalBoxPrincipal
        -ecartHM: AtomicReference<Double>
        -ecartBM: AtomicReference<Double>
        -ecartHD: AtomicReference<Double>
        -ecartVD: AtomicReference<Double>

        +Controleur(vbp: VerticalBoxPrincipal)
        +setCommand(c: Commande)
        +initActionButtons()
        +executeCommand()
        +initSauvegarde()
        +emptyRedoStack()
    }

    class Start #dea2eb {
        -verticalBoxPrincipal: VerticalBoxPrincipal
        -controleur: Controleur

        +{static} main(String[] args)
        +start(p: Stage)
    }
    '---------CONTROLEUR--------------'

    '-------------VUE--------------'
    abstract class AbstractPanneau #42b883 {
        +paneBorder: Border
        +paneBackground: Background

        #AbstractPanneau()
    }

    class VerticalBoxPrincipal #42b883 implements Observer {

        -panneauDImages: HBox
        -panneauGauche: PanneauStatique
        -panneauMilieu: PanneauDynamique
        -panneauDroite: PanneauDynamique

        -barreSelection: MenuBar

        -boutonSauvegarde: MenuItem
        -boutonCharger: MenuItem

        -boutonUndo: Button
        -boutonRedo: Button

        +VerticalBoxPrincipal(s: Stage, ps: PanneauStatique,
        pdM: PanneauDynamique, pdD: PanneauDynamique)
        +update(s: Subject)
    }

    class PanneauStatique #42b883 extends AbstractPanneau implements Observer{

        -image: Image
        -imageView: ImageView

        +PanneauStatique(ic: ImageContainer)
        +update(s: Subject)
    }

    class PanneauDynamique #42b883 extends AbstractPanneau implements Observer{
        -paneBackground: Border
        -perspective: Perspective
        -setStrategy: Strategy

        +PanneauDynamique(p: Perspective)
        +update(s: Subject)
    }
    '-------------VUE--------------'


   Observer --o Subject
   Controleur -> GestionnaireCommande : Utilise
   CurrentProjectState <--- Controleur : Modifie
   Perspective <-- Controleur : Modifie
   ImageContainer <-- Controleur : Modifie
   Controleur o-- Commande

   VerticalBoxPrincipal o-down- PanneauDynamique
   VerticalBoxPrincipal o-down- PanneauStatique

   'Start -> ImageContainer : Utilise
   'Start -> Perspective: Utilise
   'Start -> AbstractPanneau : Utilise
   'Start -> GestionnaireCommande : Utilise

   CurrentProjectState o-- Memento
   CurrentProjectState o-down- Perspective
   CurrentProjectState o-down- ImageContainer

   VerticalBoxPrincipal -- Controleur


   PanneauDynamique o-- Perspective
   PanneauStatique o---- ImageContainer

   CurrentProjectState --> GestionnaireCommande : Utilise





@enduml

Command = Invoker
Perspective = Panel

Chaque panneau va chercher du modele
les informations de sa perspective respective

L'image implémente Subject car durant lexecution
lutilisateur doit pouvoir changer l'image quand qu'il veut

Perspective implémente Subject pour actualiser le tout lors
des Commandes