@startuml


skinparam backgroundColor #EEEBDC

legend top left
 |= Color  |= Package |
 |<back:#a2c5eb>   </back>| Modele |
 |<back:#42b883>   </back>| Vue |
 |<back:#dea2eb>   </back>| Controleur |
 |<back:#FEFFA5>   </back>| Observer |
 |<back:#F5B0CB>   </back>| Commande |
 |<back:#2CEAA3>   </back>| Memento |
 |<back:#7287DF>   </back>| Strategy |

 endlegend




    '----------OBSERVER--------------'
    interface Observer #FEFFA5{
        +update(args: Subject)
    }

    interface Subject #FEFFA5{
        -observers: Observer<>
        -mainState

        +attachObserver(o: Observer)
        +detachObserver(o: Observer)
        +notifyObservers()

    }
    '-----------OBSERVER--------------'



    '-----------COMMAND--------------'
    interface Commande #F5B0CB {
        +execute()
    }

    class CommandTranslate #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandZoomIn #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandZoomOut #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandUndo #F5B0CB implements Commande{
        +execute()
    }

    class CommandRedo #F5B0CB implements Commande{
        +execute()
    }

    class CommandSetMilieu #F5B0CB implements Commande{
        +execute()
    }

    class CommandSetDroite #F5B0CB implements Commande{
        +execute()
    }


    '-----------COMMAND--------------'


    '-----------SINGLETON--------------'


    class GestionnaireCommande #dea2eb{
        -instance: GestionnaireCommande
        -cps: currentProjectState
        -pileDeCommande: Stack<Memento>
        -pileDeUndo  : Stack<Memento>


        -GestionnaireCommande()
        + {static} getInstance(): GestionnaireCommande

        +undo() : Memento

    }
    '-----------SINGLETON--------------'

    '-----------MEMENTO--------------'

    'Originator = CurrentProjectState'
    'Caretaker = GestionnaireDeCommande'


    class Memento #2CEAA3{

        '{static}+PERSPECTIVE_CENTRE
        '{static}+PERSPECTIVE_DROITE

        -image: currentProjectImage
        -perspectiveMilieu: Perspective
        -perspectiveDroite: Perspective

        'Constructeur'
        +Memento(image, perspectiveMilieu, perspectiveDroite)
        'Getters du memento'
        +getImage()
        +getPerspectiveMilieu()
        +getPerspectiveDroite()
    }


    '-----------MEMENTO--------------'



    class CurrentProjectState #a2c5eb implements Subject {

        -currentPerspective: int
        -image: currentProjectImage
        -perspectiveMilieu: Perspective
        -perspectiveDroite: Perspective

        +makeMemento()
        +restore(m : Memento)
        'restore() vas appeler undo() Gestionnaire Commande
    }


    class Perspective #a2c5eb implements Subject{

        -imageView: ImageView
        -positionX: double
        -positionY: double
        -zoomPourcentage: double


        +translate(x:double, y:double)
        +zoom(pourcentage: double)

    }

    class Image #a2c5eb implements Subject{

        -path: String
    }

    class Controleur #dea2eb{

        -command: Commande
        +setCommand(c: Commande)
        +executeCommand()

        +initSauvegarde()
    }


    class VerticalBoxPrincipal #42b883 {

        -panneauDImages: HBox
        -panneauGauche: PanneauStatique
        -panneauMilieu: PanneauDynamique
        -panneauDroite: PanneauDynamique

        -barreSelection: MenuBar

        -boutonSauvegarde: MenuItem
        -boutonCharger: MenuItem

        -boutonUndo: Button
        -boutonRedo: Button

    }


    class PanneauStatique #42b883 implements Observer{

        -image: Image
        -imageView: ImageView
    }

    class PanneauDynamique #42b883 implements Observer{

        -currentStrategy: Strategy
        -setStrategy: Strategy
        -image: Image
        -perspective: Perspective
    }

    interface StrategyHover #7287DF {

        +setHover()
    }

    class StrategyHoverMilieu #7287DF implements StrategyHover {

        +setHover()
    }

    class StrategyHoverDroite #7287DF implements StrategyHover{

        +setHover()
    }


    PanneauDynamique o- StrategyHover
   Observer -o Subject
   Controleur -l-> GestionnaireCommande : Utilise
   CurrentProjectState <-- Controleur : Modifie
   Perspective <-- Controleur : Modifie
   Image <- Controleur : Modifie
   Controleur o-- Commande

   VerticalBoxPrincipal o-- PanneauDynamique
   VerticalBoxPrincipal o-up- PanneauStatique

   CurrentProjectState o- Perspective
   CurrentProjectState o- Image

   VerticalBoxPrincipal -- Controleur

   Memento ---o GestionnaireCommande
   CurrentProjectState --> Memento


   PanneauDynamique o-- Image
   Image --> PanneauDynamique

   PanneauDynamique o-- Perspective

   PanneauStatique o- Image

   CurrentProjectState --> GestionnaireCommande : Utilise
   







@enduml

Command = Invoker
Perspective = Panel

Chaque panneau va chercher du modele 
les informations de sa perspective respective

L'image implémente Subject car durant lexecution
lutilisateur doit pouvoir changer l'image quand qu'il veut

Perspective implémente Subject pour actualiser le tout lors 
des Commandes 