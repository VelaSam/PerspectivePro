@startuml


skinparam backgroundColor #EEEBDC

legend top left
 |= Color  |= Package |
 |<back:#a2c5eb>   </back>| Modele |
 |<back:#42b883>   </back>| Vue |
 |<back:#dea2eb>   </back>| Controleur |
 |<back:#FEFFA5>   </back>| Observer |
 |<back:#F5B0CB>   </back>| Commande |
 |<back:#2CEAA3>   </back>| Memento |

 endlegend




    '----------OBSERVER--------------'
    interface Observer #FEFFA5{
        +update(args)
    }

    interface Subject #FEFFA5{
        -observers: Observer[]
        -mainState

        +attachObserver(o: Observer)
        +detachObserver(o: Observer)
        +notifySubscribers()

    }
    '-----------OBSERVER--------------'



    '-----------COMMAND--------------'
    interface Commande #F5B0CB {
        +execute()
    }

    class CommandTranslate #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandZoomIn #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandZoomOut #F5B0CB implements Commande{
        +execute()
   
    }

    class CommandUndo #F5B0CB implements Commande{
        +execute()
    }

    
    '-----------COMMAND--------------'


    '-----------SINGLETON--------------'


    class GestionnaireCommande #dea2eb{
        -instance: GestionnaireCommande
        -pileDeCommande: Stack<Memento>
        

        -GestionnaireCommande()
        + {static} getInstance(): GestionnaireCommande
        
        +undo()

    } 
    '-----------SINGLETON--------------'

    '-----------MEMENTO--------------'

    'Originator = CurrentProjectState'
    'Caretaker = GestionnaireDeCommande'


    class Memento #2CEAA3{

        {static}+PERSPECTIVE_CENTRE
        {static}+PERSPECTIVE_DROITE

        -perspectiveCentre: Perspective
        -perspectiveDroite: Perspective

        +Memento(centre: Perspective, droite: Perspective)
        +getState(): Perspective[]
    }

    
    '-----------MEMENTO--------------'



    class CurrentProjectState #a2c5eb implements Subject {

        -image: Image
        -perspectiveMilieu: Perspective
        -perspectiveDroite: Perspective
        
        +save(): Memento
        +restore(m: Memento)
    }


    class Perspective #a2c5eb implements Subject{
        
        -imageView: ImageView
        -positionX: double
        -positionY: double
        -zoomPourcentage: double


        +translate(x:double, y:double)
        +zoom(pourcentage: double)

    }

    class Image #a2c5eb implements Subject{

        -path: String
    }

    class Controleur #dea2eb{

        -command: Commande
        +setCommand(c: Commande)
        +executeCommand()

        +initSauvegarde()
    }


    class VerticalBoxPrincipal #42b883 {

        -panneauDImages: HBox
        -panneauGauche: PanneauStatique
        -panneauMilieu: PanneauDynamique
        -panneauDroite: PanneauDynamique

        -barreSelection: MenuBar

        -boutonSauvegarde: MenuItem
        -boutonCharger: MenuItem

        -boutonUndo: Button
        -boutonRedo: Button

    }


    class PanneauStatique #42b883 implements Observer{

        -image: Image
        -imageView: ImageView
    }

    class PanneauDynamique #42b883 implements Observer{

        -image: Image
        -perspective: Perspective




    }

   

   Observer -o Subject
   Controleur -l-> GestionnaireCommande : Utilise
   CurrentProjectState <-- Controleur : Modifie
   Perspective <-- Controleur : Modifie
   Image <- Controleur : Modifie
   Controleur o-- Commande

   VerticalBoxPrincipal o-- PanneauDynamique
   VerticalBoxPrincipal o-up- PanneauStatique

   CurrentProjectState o- Perspective
   CurrentProjectState o- Image

   VerticalBoxPrincipal -- Controleur

   Memento ---o GestionnaireCommande
   CurrentProjectState --> Memento

   
   PanneauDynamique o-- Image
   Image --> PanneauDynamique
   
   PanneauDynamique o-- Perspective

   PanneauStatique o- Image
   







@enduml

Command = Invoker
Perspective = Panel

Chaque panneau va chercher du modele 
les informations de sa perspective respective

L'image implémente Subject car durant lexecution
lutilisateur doit pouvoir changer l'image quand qu'il veut

Perspective implémente Subject pour actualiser le tout lors 
des Commandes 